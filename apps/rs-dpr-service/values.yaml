# Copyright 2024 CS Group
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# -- Namespace for the deployment
namespace: processing

# -- Number of replicas for the deployment
replicaCount: 1

service:
  # -- Port for the service
  port: 8080

app:
  # -- Port for the application
  port: 8000
  # -- URL suffix for the application. The same value should also be included into ingress.path
  docsUrl: /docs
  # -- Config directory for the application
  confDir: /app/conf
  # -- URL of the API Key Manager service (internal)
  uacUrl: http://apikeymanager.processing.svc.cluster.local:8000/auth/check_key
  # -- URL of the API Key Manager home page (public)
  uacHomeUrl: https://apikeymanager.{{ platform_domain_name }}/docs
  
dask:
  # -- Dask gateway address
  gateway_address: http://traefik-dask-gateway.dask-gateway.svc.cluster.local
  # -- Dask gateway auth type
  gateway_auth_type: jupyterhub
  # -- Jupyter API Token when dask.jupyterhub=jupyterhub
  jupyterhub_api_token: {{ rs_server_staging.jupyterhub_token }}
  # -- Dask cluster name for real eopf processor
  clusterName: dask-eopf
  # -- Dask cluster name for mockup eopf processor
  clusterMockupName: dask-eopf-mockup

probe:
  startup:
    # -- Path for the liveness probe
    path: /_mgmt/ping
    # -- Port for the liveness probe
    port: 8000
    # -- InitialDelaySeconds for the liveness probe
    initialDelaySeconds: 20
    # -- periodSeconds for the liveness probe
    periodSeconds: 2
    # -- timeoutSeconds for the liveness probe
    timeoutSeconds: 1
  liveness:
    # -- Path for the liveness probe
    path: /_mgmt/ping
    # -- Port for the liveness probe
    port: 8000
    # -- InitialDelaySeconds for the liveness probe
    initialDelaySeconds: 0
    # -- periodSeconds for the liveness probe
    periodSeconds: 30
    # -- timeoutSeconds for the liveness probe
    timeoutSeconds: 5
  readiness:
    # -- Path for the readiness probe
    path: /_mgmt/ping
    # -- Port for the readiness probe
    port: 8000
    # -- InitialDelaySeconds for the readiness probe
    initialDelaySeconds: 0
    # -- periodSeconds for the readiness probe
    periodSeconds: 30
    # -- timeoutSeconds for the readiness probe
    timeoutSeconds: 5

# -- Pod affinity
affinity:
  nodeAffinity:
   requiredDuringSchedulingIgnoredDuringExecution:
     nodeSelectorTerms:
     - matchExpressions:
       - key: node-role.kubernetes.io/processing
         operator: Exists

# -- Pod toleration
tolerations:
- key: role
  operator: Equal
  value: processing
  effect: NoSchedule

# -- Pod initContainers
initContainers:
- name: init-check
  image: alpine/curl:latest
  command:
    - /bin/sh
    - -c
    - |
      until test "$(curl -XGET --silent grafana-tempo-distributor.logging.svc.cluster.local:3100/ready)" = "ready"; do echo grafana-tempo-distributor is not ready; sleep 2; done; echo grafana-tempo-distributor reached

postgres:
  # -- PostgreSQL port
  port: "5432"
  # -- PostgreSQL database name
  db: {{ rs_server.database.name }}
  # -- PostgreSQL service URL
  host: {{ rs_server.database.host }}
  secret:
    # -- Username to authenticate with the PostgreSQL service
    user: {{ rs_server.database.username }}
    # -- Password to authenticate with the PostgreSQL service
    pass: {{ rs_server.database.password }}

obs:
  # -- URL of the object storage service endpoint
  endpoint: {{ s3.endpoint }}
  # -- Region of the object storage service
  region: {{ s3.region }}
  secret:
    # -- Access Key to authenticate with the object storage service
    ak: {{ s3.access_key }}
    # -- Secret Key to authenticate with the object storage service
    sk: {{ s3.secret_key }}

auth:
  secret:
    # -- OIDC End Point
    oidc_endpoint: "https://iam.{{ platform_domain_name }}"
    # -- OIDC Realm
    oidc_realm: "rspy"
    # -- OIDC CLient ID
    oidc_client_id: "apikeymanager"
    # -- OIDC Secret used to sync user info from Keycloak
    oidc_client_secret: "{{ apikeymanager_oidc_client_secret }}"
    # -- Random string used to encode cookie-based HTTP sessions in SessionMiddleware
    cookie_secret: "{{ rsserver_cookieSecret }}"
    
image:
  # -- Image registry
  registry: ghcr.io
  # -- Image repository
  repository: rs-python
  # -- Image name
  name: rs-dpr-service
  # -- Image pull policy
  PullPolicy: IfNotPresent
  #imagePullSecrets: regcred

ingress:
  # -- Enabled/Disable ingress
  enabled: true
  issuer:
    # -- Ingress Issuer type
    type: cluster-issuer
    # -- Ingress Issuer name
    name: letsencrypt-prod
  # -- Ingress host name
  host: {{ platform_domain_name }}
  # -- Ingress path for the application
  path:
    - /dpr/processes
    - /dpr/jobs

resources:
  request:
    # -- Pod memory request
    ram: "256Mi"
    # -- Pod CPU request
    cpu: "100m"
  limit:
    # -- Pod memory limit
    ram: "1000Mi"
    # -- Pod CPU limit
    cpu: "500m"

tempo:
  # -- Grafana tempo endpoint.
  endpoint: http://grafana-tempo-distributor.logging.svc.cluster.local:4317

otel:
  # -- Trace request headers with OpenTelemetry ?
  trace_headers: false
  # -- Trace request bodies and response contents with OpenTelemetry ?
  trace_body: false
